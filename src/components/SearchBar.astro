---
interface Props {
  placeholder?: string;
  searchableItems?: Array<{
    title: string;
    description?: string;
    url: string;
    type: 'project' | 'blog' | 'page';
  }>;
}

const { 
  placeholder = "Search projects, blog posts, or pages...",
  searchableItems = []
} = Astro.props;
---

<div class="search-container">
  <div class="search-bar">
    <div class="search-input-wrapper">
      <svg class="search-icon" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"/>
        <path d="m21 21-4.35-4.35"/>
      </svg>
      <input 
        type="text" 
        id="search-input"
        class="search-input" 
        placeholder={placeholder}
        aria-label="Search"
        autocomplete="off"
      />
      <button 
        class="search-clear" 
        id="search-clear"
        aria-label="Clear search"
        style="display: none;"
      >
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="18" y1="6" x2="6" y2="18"/>
          <line x1="6" y1="6" x2="18" y2="18"/>
        </svg>
      </button>
    </div>
    <div class="search-results" id="search-results" style="display: none;">
      <!-- Results will be populated by JavaScript -->
    </div>
  </div>
</div>

<style>
  .search-container {
    position: relative;
    max-width: 600px;
    margin: 0 auto;
  }

  .search-bar {
    position: relative;
    width: 100%;
  }

  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    background: var(--card-bg);
    border: 2px solid var(--border-color);
    border-radius: 12px;
    padding: 0.75rem 1rem;
    transition: all 0.3s ease;
  }

  .search-input-wrapper:focus-within {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(242, 53, 81, 0.1);
  }

  .search-icon {
    color: var(--muted-text);
    margin-right: 0.75rem;
    flex-shrink: 0;
  }

  .search-input {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: var(--text-color);
    font-size: 1rem;
    font-family: inherit;
  }

  .search-input::placeholder {
    color: var(--muted-text);
  }

  .search-clear {
    background: none;
    border: none;
    color: var(--muted-text);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .search-clear:hover {
    color: var(--text-color);
    background: var(--hover-bg);
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    box-shadow: 0 10px 25px var(--shadow-color);
    max-height: 400px;
    overflow-y: auto;
    z-index: 1000;
    margin-top: 0.5rem;
  }

  .search-result-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-bottom: 1px solid var(--border-color);
    cursor: pointer;
    transition: background-color 0.2s ease;
    text-decoration: none;
    color: var(--text-color);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background: var(--hover-bg);
  }

  .search-result-item.selected {
    background: var(--primary-color);
    color: white;
  }

  .search-result-icon {
    width: 40px;
    height: 40px;
    border-radius: 8px;
    background: var(--primary-color);
    display: flex;
    align-items: center;
    justify-content: center;
    margin-right: 1rem;
    flex-shrink: 0;
  }

  .search-result-content {
    flex: 1;
  }

  .search-result-title {
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  .search-result-description {
    font-size: 0.9rem;
    color: var(--muted-text);
  }

  .search-result-type {
    font-size: 0.8rem;
    color: var(--primary-color);
    text-transform: uppercase;
    font-weight: 600;
    letter-spacing: 0.5px;
  }

  .no-results {
    padding: 2rem;
    text-align: center;
    color: var(--muted-text);
  }

  .search-shortcut {
    position: absolute;
    top: 50%;
    right: 1rem;
    transform: translateY(-50%);
    background: var(--hover-bg);
    border: 1px solid var(--border-color);
    border-radius: 4px;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    color: var(--muted-text);
    pointer-events: none;
  }

  @media (max-width: 768px) {
    .search-shortcut {
      display: none;
    }
  }
</style>

<script>
  // Search functionality
  function initSearch() {
    const searchInput = document.getElementById('search-input') as HTMLInputElement;
    const searchResults = document.getElementById('search-results');
    const searchClear = document.getElementById('search-clear');
    
    if (!searchInput || !searchResults || !searchClear) return;

    // Sample searchable items (in a real app, this would come from your data)
    const searchableItems = [
      {
        title: "E-commerce Microservices",
        description: "Scalable e-commerce platform built with NestJS and Kafka",
        url: "/projects/ecommerce-microservices",
        type: "project"
      },
      {
        title: "Real-time Analytics Dashboard",
        description: "Dashboard for processing millions of data points",
        url: "/projects/analytics-dashboard",
        type: "project"
      },
      {
        title: "About Me",
        description: "Learn more about my background and expertise",
        url: "/about",
        type: "page"
      },
      {
        title: "Contact",
        description: "Get in touch for consulting opportunities",
        url: "/contact",
        type: "page"
      },
      {
        title: "Microservices Best Practices",
        description: "Guide to building scalable microservices",
        url: "/blog/microservices-best-practices",
        type: "blog"
      }
    ];

    let selectedIndex = -1;
    let filteredItems: typeof searchableItems = [];

    function performSearch(query: string) {
      if (!query.trim()) {
        filteredItems = [];
        hideResults();
        return;
      }

      const searchTerm = query.toLowerCase();
      filteredItems = searchableItems.filter(item => 
        item.title.toLowerCase().includes(searchTerm) ||
        item.description?.toLowerCase().includes(searchTerm)
      );

      displayResults();
    }

    function displayResults() {
      if (!searchResults) return;
      
      if (filteredItems.length === 0) {
        searchResults.innerHTML = '<div class="no-results">No results found</div>';
        searchResults.style.display = 'block';
        return;
      }

      searchResults.innerHTML = filteredItems.map((item, index) => `
        <a href="${item.url}" class="search-result-item ${index === selectedIndex ? 'selected' : ''}">
          <div class="search-result-icon">
            ${getIconForType(item.type)}
          </div>
          <div class="search-result-content">
            <div class="search-result-title">${item.title}</div>
            <div class="search-result-description">${item.description}</div>
          </div>
          <div class="search-result-type">${item.type}</div>
        </a>
      `).join('');

      searchResults.style.display = 'block';
      selectedIndex = -1;
    }

    function hideResults() {
      if (searchResults) {
        searchResults.style.display = 'none';
      }
      selectedIndex = -1;
    }

    function getIconForType(type: string) {
      switch (type) {
        case 'project':
          return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z"/></svg>';
        case 'blog':
          return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14,2 14,8 20,8"/><line x1="16" y1="13" x2="8" y2="13"/><line x1="16" y1="17" x2="8" y2="17"/><polyline points="10,9 9,9 8,9"/></svg>';
        case 'page':
          return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"/><polyline points="14,2 14,8 20,8"/></svg>';
        default:
          return '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="11" cy="11" r="8"/><path d="m21 21-4.35-4.35"/></svg>';
      }
    }

    // Event listeners
    searchInput.addEventListener('input', (e) => {
      const query = (e.target as HTMLInputElement).value;
      performSearch(query);
      searchClear.style.display = query ? 'block' : 'none';
    });

    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        hideResults();
        searchInput.blur();
      } else if (e.key === 'ArrowDown') {
        e.preventDefault();
        selectedIndex = Math.min(selectedIndex + 1, filteredItems.length - 1);
        updateSelection();
      } else if (e.key === 'ArrowUp') {
        e.preventDefault();
        selectedIndex = Math.max(selectedIndex - 1, -1);
        updateSelection();
      } else if (e.key === 'Enter' && selectedIndex >= 0) {
        e.preventDefault();
        const selectedItem = filteredItems[selectedIndex];
        if (selectedItem) {
          window.location.href = selectedItem.url;
        }
      }
    });

    searchClear.addEventListener('click', () => {
      searchInput.value = '';
      searchInput.focus();
      hideResults();
      searchClear.style.display = 'none';
    });

    // Click outside to close
    document.addEventListener('click', (e) => {
      if (!searchInput.contains(e.target as Node) && searchResults && !searchResults.contains(e.target as Node)) {
        hideResults();
      }
    });

    function updateSelection() {
      if (!searchResults) return;
      
      const items = searchResults.querySelectorAll('.search-result-item');
      items.forEach((item, index) => {
        item.classList.toggle('selected', index === selectedIndex);
      });
    }

    // Keyboard shortcut (Ctrl/Cmd + K)
    document.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === 'k') {
        e.preventDefault();
        searchInput.focus();
      }
    });
  }

  // Initialize search on DOM load
  document.addEventListener('DOMContentLoaded', initSearch);
</script> 