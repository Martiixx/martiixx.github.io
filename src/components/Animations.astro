---
// Enhanced Animations Component
---

<style>
  /* Fade in animations */
  .fade-in {
    opacity: 0;
    transform: translateY(30px);
    transition: all 0.6s ease;
  }

  .fade-in.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Slide in animations */
  .slide-in-left {
    opacity: 0;
    transform: translateX(-50px);
    transition: all 0.6s ease;
  }

  .slide-in-left.visible {
    opacity: 1;
    transform: translateX(0);
  }

  .slide-in-right {
    opacity: 0;
    transform: translateX(50px);
    transition: all 0.6s ease;
  }

  .slide-in-right.visible {
    opacity: 1;
    transform: translateX(0);
  }

  /* Scale animations */
  .scale-in {
    opacity: 0;
    transform: scale(0.8);
    transition: all 0.6s ease;
  }

  .scale-in.visible {
    opacity: 1;
    transform: scale(1);
  }

  /* Stagger animations for lists */
  .stagger-item {
    opacity: 0;
    transform: translateY(20px);
    transition: all 0.4s ease;
  }

  .stagger-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  /* Enhanced hover effects */
  .hover-lift {
    transition: all 0.3s ease;
  }

  .hover-lift:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
  }

  .hover-glow {
    transition: all 0.3s ease;
  }

  .hover-glow:hover {
    box-shadow: 0 0 20px rgba(242, 53, 81, 0.3);
  }

  .hover-scale {
    transition: all 0.3s ease;
  }

  .hover-scale:hover {
    transform: scale(1.05);
  }

  /* Pulse animation */
  .pulse {
    animation: pulse 2s infinite;
  }

  @keyframes pulse {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(1.05);
    }
    100% {
      transform: scale(1);
    }
  }

  /* Bounce animation */
  .bounce {
    animation: bounce 2s infinite;
  }

  @keyframes bounce {
    0%, 20%, 50%, 80%, 100% {
      transform: translateY(0);
    }
    40% {
      transform: translateY(-10px);
    }
    60% {
      transform: translateY(-5px);
    }
  }

  /* Shimmer effect */
  .shimmer {
    position: relative;
    overflow: hidden;
  }

  .shimmer::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    transition: left 0.5s;
  }

  .shimmer:hover::before {
    left: 100%;
  }

  /* Typing animation */
  .typing {
    overflow: hidden;
    border-right: 2px solid var(--primary-color);
    white-space: nowrap;
    animation: typing 3.5s steps(40, end), blink-caret 0.75s step-end infinite;
  }

  @keyframes typing {
    from {
      width: 0;
    }
    to {
      width: 100%;
    }
  }

  @keyframes blink-caret {
    from, to {
      border-color: transparent;
    }
    50% {
      border-color: var(--primary-color);
    }
  }

  /* Gradient text animation */
  .gradient-text {
    background: linear-gradient(45deg, var(--primary-color), #d32f2f, var(--primary-color));
    background-size: 200% 200%;
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    animation: gradient-shift 3s ease infinite;
  }

  @keyframes gradient-shift {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  /* Loading skeleton */
  .skeleton {
    background: linear-gradient(90deg, #2d3748 25%, #4a5568 50%, #2d3748 75%);
    background-size: 200% 100%;
    animation: skeleton-loading 1.5s infinite;
  }

  @keyframes skeleton-loading {
    0% {
      background-position: 200% 0;
    }
    100% {
      background-position: -200% 0;
    }
  }

  /* Parallax effect */
  .parallax {
    transform: translateZ(0);
    will-change: transform;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    *,
    *::before,
    *::after {
      animation-duration: 0.01ms !important;
      animation-iteration-count: 1 !important;
      transition-duration: 0.01ms !important;
    }
  }
</style>

<script>
  // Intersection Observer for scroll-triggered animations
  function initScrollAnimations() {
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          entry.target.classList.add('visible');
          
          // Track animation event
          if (window.trackEvent) {
            window.trackEvent('animation_triggered', {
              element: entry.target.className,
              type: 'scroll_animation'
            });
          }
        }
      });
    }, observerOptions);

    // Observe elements with animation classes
    const animatedElements = document.querySelectorAll(
      '.fade-in, .slide-in-left, .slide-in-right, .scale-in, .stagger-item'
    );
    
    animatedElements.forEach(element => {
      observer.observe(element);
    });

    // Stagger animation for lists
    const staggerContainers = document.querySelectorAll('.stagger-container');
    staggerContainers.forEach(container => {
      const items = container.querySelectorAll('.stagger-item');
      items.forEach((item, index) => {
        (item as HTMLElement).style.transitionDelay = `${index * 0.1}s`;
      });
    });
  }

  // Parallax effect
  function initParallax() {
    const parallaxElements = document.querySelectorAll('.parallax');
    
    window.addEventListener('scroll', () => {
      const scrolled = window.pageYOffset;
      
      parallaxElements.forEach(element => {
        const speed = (element as HTMLElement).dataset.speed || '0.5';
        const yPos = -(scrolled * parseFloat(speed));
        (element as HTMLElement).style.transform = `translateY(${yPos}px)`;
      });
    });
  }

  // Typing animation
  function initTypingAnimation() {
    const typingElements = document.querySelectorAll('.typing');
    
    typingElements.forEach(element => {
      const text = element.textContent || '';
      element.textContent = '';
      
      let i = 0;
      const typeWriter = () => {
        if (i < text.length) {
          element.textContent += text.charAt(i);
          i++;
          setTimeout(typeWriter, 100);
        }
      };
      
      // Start typing when element is visible
      const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            typeWriter();
            observer.unobserve(entry.target);
          }
        });
      });
      
      observer.observe(element);
    });
  }

  // Enhanced hover effects
  function initHoverEffects() {
    // Add hover classes to elements
    const cards = document.querySelectorAll('.service-card, .project-card');
    cards.forEach(card => {
      card.classList.add('hover-lift');
    });

    const buttons = document.querySelectorAll('.btn');
    buttons.forEach(button => {
      button.classList.add('hover-glow');
    });

    const images = document.querySelectorAll('.hero-profile, .project-image');
    images.forEach(image => {
      image.classList.add('hover-scale');
    });
  }

  // Initialize all animations
  document.addEventListener('DOMContentLoaded', () => {
    initScrollAnimations();
    initParallax();
    initTypingAnimation();
    initHoverEffects();
  });
</script> 